//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 1.0.0.0 using the following command:
// XmlSchemaClassGenerator.Console C:\Users\MIHO-D\source\repos\Bof.Stat.DCS\Bof.Stat.DCS.Converter\Schemas\SIRA_1.0.xsd --namespace=Bof.Stat.DCS.Converter.Model.XML.SIRA --collectionSettersMode=Public --nullableReferenceAttributes -v --enumAsString -0
namespace Bof.Stat.DCS.Converter.Model.XML.SIRA
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("headerType", Namespace = "http://bof.fi/SIRA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HeaderType
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfManagementCompanyIdentifier")]
        public string TypeOfManagementCompanyIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 10.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(10)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("managementCompanyIdentifier")]
        public string ManagementCompanyIdentifier { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfReporterIdentifier")]
        public string TypeOfReporterIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 12.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(12)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("reporterIdentifier")]
        public string ReporterIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 300.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(300)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("reporterName")]
        public string ReporterName { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("surveyCode")]
        public string SurveyCode { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("reportingPeriodEnd", DataType = "date")]
        public System.DateTime ReportingPeriodEnd { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("frequency")]
        public string Frequency { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("creationDate", DataType = "dateTime")]
        public System.DateTime CreationDate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 500.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(500)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("entitysComment")]
        public string EntitysComment { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ifType", Namespace = "http://bof.fi/SIRA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IfType
    {

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9999999999999999.9999.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999999.9999.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 4.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-9999999999999999.9999", "9999999999999999.9999")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("exchangeRate")]
        public decimal ExchangeRate { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfExchangeRate")]
        public string CurrencyOfExchangeRate { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("balanceSheetTotal")]
        public decimal BalanceSheetTotal { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("balanceSheetCurrency")]
        public string BalanceSheetCurrency { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9999999999.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-9999999999", "9999999999")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("totalNumberOfUnitholders")]
        public long TotalNumberOfUnitholders { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9999999999.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-9999999999", "9999999999")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("numberOfPrivatePersonUnitholders")]
        public long NumberOfPrivatePersonUnitholders { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("holdingsOfTenLargestUnitholders")]
        public decimal HoldingsOfTenLargestUnitholders { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfHoldingsOfTenLargestUnitholders")]
        public string CurrencyOfHoldingsOfTenLargestUnitholders { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -99.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 4.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-99.99", "99.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("durationOfBondsAndMoneyMarketInstruments")]
        public decimal DurationOfBondsAndMoneyMarketInstrumentsValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DurationOfBondsAndMoneyMarketInstruments property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DurationOfBondsAndMoneyMarketInstrumentsValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -99.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 99.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 4.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> DurationOfBondsAndMoneyMarketInstruments
        {
            get
            {
                if (this.DurationOfBondsAndMoneyMarketInstrumentsValueSpecified)
                {
                    return this.DurationOfBondsAndMoneyMarketInstrumentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DurationOfBondsAndMoneyMarketInstrumentsValue = value.GetValueOrDefault();
                this.DurationOfBondsAndMoneyMarketInstrumentsValueSpecified = value.HasValue;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("totalValueOfUnitLinkedInsurancesDomesticCompanies")]
        public decimal TotalValueOfUnitLinkedInsurancesDomesticCompanies { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("totalValueOfUnitLinkedInsurancesForeignCompanies")]
        public decimal TotalValueOfUnitLinkedInsurancesForeignCompanies { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfUnitLinkedInsurances")]
        public string CurrencyOfUnitLinkedInsurances { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("collateralRequirementForDerivatives")]
        public decimal CollateralRequirementForDerivatives { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfCollateralRequirementForDerivatives")]
        public string CurrencyOfCollateralRequirementForDerivatives { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("collateralRequirementForRepurchaseAgreements")]
        public decimal CollateralRequirementForRepurchaseAgreements { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfCollateralRequirementForRepurchaseAgreements")]
        public string CurrencyOfCollateralRequirementForRepurchaseAgreements { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("collateralRequirementForSecuritiesLendingAgreements")]
        public decimal CollateralRequirementForSecuritiesLendingAgreements { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfCollateralRequirementForSecuritiesLendingAgreements")]
        public string CurrencyOfCollateralRequirementForSecuritiesLendingAgreements { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("dividendIncomeAndIncomeFromFundShares")]
        public decimal DividendIncomeAndIncomeFromFundSharesValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DividendIncomeAndIncomeFromFundShares property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DividendIncomeAndIncomeFromFundSharesValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> DividendIncomeAndIncomeFromFundShares
        {
            get
            {
                if (this.DividendIncomeAndIncomeFromFundSharesValueSpecified)
                {
                    return this.DividendIncomeAndIncomeFromFundSharesValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DividendIncomeAndIncomeFromFundSharesValue = value.GetValueOrDefault();
                this.DividendIncomeAndIncomeFromFundSharesValueSpecified = value.HasValue;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("interestIncome")]
        public decimal InterestIncomeValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the InterestIncome property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool InterestIncomeValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> InterestIncome
        {
            get
            {
                if (this.InterestIncomeValueSpecified)
                {
                    return this.InterestIncomeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.InterestIncomeValue = value.GetValueOrDefault();
                this.InterestIncomeValueSpecified = value.HasValue;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("profitDistribution")]
        public decimal ProfitDistributionValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ProfitDistribution property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool ProfitDistributionValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> ProfitDistribution
        {
            get
            {
                if (this.ProfitDistributionValueSpecified)
                {
                    return this.ProfitDistributionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ProfitDistributionValue = value.GetValueOrDefault();
                this.ProfitDistributionValueSpecified = value.HasValue;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sbsType", Namespace = "http://bof.fi/SIRA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SbsType
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("category")]
        public string Category { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("contractType")]
        public string ContractType { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("instrument")]
        public string Instrument { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("collateral")]
        public string Collateral { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("internalIdentificationCode")]
        public string InternalIdentificationCode { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum length: 12.</para>
        /// <para xml:lang="en">Maximum length: 12.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MinLengthAttribute(12)]
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(12)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("isinCode")]
        public string IsinCode { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 50.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(50)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("allCode")]
        public string AllCode { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 225.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(225)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("instrumentsName")]
        public string InstrumentsName { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.999999.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.999999.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// <para xml:lang="en">Total number of digits: 24.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.999999", "999999999999999999.999999")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("numberOfInstruments")]
        public decimal NumberOfInstrumentsValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NumberOfInstruments property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool NumberOfInstrumentsValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.999999.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.999999.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// <para xml:lang="en">Total number of digits: 24.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> NumberOfInstruments
        {
            get
            {
                if (this.NumberOfInstrumentsValueSpecified)
                {
                    return this.NumberOfInstrumentsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NumberOfInstrumentsValue = value.GetValueOrDefault();
                this.NumberOfInstrumentsValueSpecified = value.HasValue;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalNominalValue")]
        public decimal TotalNominalValueValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalNominalValue property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalNominalValueValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> TotalNominalValue
        {
            get
            {
                if (this.TotalNominalValueValueSpecified)
                {
                    return this.TotalNominalValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalNominalValueValue = value.GetValueOrDefault();
                this.TotalNominalValueValueSpecified = value.HasValue;
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nominalValueCurrency")]
        public string NominalValueCurrency { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("totalMarketValueDirtyPrice")]
        public decimal TotalMarketValueDirtyPrice { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("marketCurrencyDirtyPrice")]
        public string MarketCurrencyDirtyPrice { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalMarketValueCleanPrice")]
        public decimal TotalMarketValueCleanPriceValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalMarketValueCleanPrice property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalMarketValueCleanPriceValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> TotalMarketValueCleanPrice
        {
            get
            {
                if (this.TotalMarketValueCleanPriceValueSpecified)
                {
                    return this.TotalMarketValueCleanPriceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalMarketValueCleanPriceValue = value.GetValueOrDefault();
                this.TotalMarketValueCleanPriceValueSpecified = value.HasValue;
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("marketCurrencyCleanPrice")]
        public string MarketCurrencyCleanPrice { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfCounterpartysIdentifier")]
        public string TypeOfCounterpartysIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysIdentifier")]
        public string CounterpartysIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysName")]
        public string CounterpartysName { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysSector")]
        public string CounterpartysSector { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysHomeCountry")]
        public string CounterpartysHomeCountry { get; set; }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("issueDate", DataType = "date")]
        public System.DateTime IssueDateValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IssueDateValueSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> IssueDate
        {
            get
            {
                if (this.IssueDateValueSpecified)
                {
                    return this.IssueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueDateValue = value.GetValueOrDefault();
                this.IssueDateValueSpecified = value.HasValue;
            }
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("maturityDate", DataType = "date")]
        public System.DateTime MaturityDateValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MaturityDateValueSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> MaturityDate
        {
            get
            {
                if (this.MaturityDateValueSpecified)
                {
                    return this.MaturityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityDateValue = value.GetValueOrDefault();
                this.MaturityDateValueSpecified = value.HasValue;
            }
        }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfIssuersIdentifier")]
        public string TypeOfIssuersIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("issuersIdentifier")]
        public string IssuersIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("issuersName")]
        public string IssuersName { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("issuersSector")]
        public string IssuersSector { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("issuersHomeCountry")]
        public string IssuersHomeCountry { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-1", "1")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("derivativesSellingOrBuyingIndicator")]
        public sbyte DerivativesSellingOrBuyingIndicatorValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DerivativesSellingOrBuyingIndicator property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DerivativesSellingOrBuyingIndicatorValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<sbyte> DerivativesSellingOrBuyingIndicator
        {
            get
            {
                if (this.DerivativesSellingOrBuyingIndicatorValueSpecified)
                {
                    return this.DerivativesSellingOrBuyingIndicatorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DerivativesSellingOrBuyingIndicatorValue = value.GetValueOrDefault();
                this.DerivativesSellingOrBuyingIndicatorValueSpecified = value.HasValue;
            }
        }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("marketplace")]
        public string Marketplace { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("underlyingAssetOfDerivative")]
        public string UnderlyingAssetOfDerivative { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfUnderlyingAssetsIdentifier")]
        public string TypeOfUnderlyingAssetsIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("underlyingAssetsIdentifier")]
        public string UnderlyingAssetsIdentifier { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfUnderlyingSecurityIssuersIdentifier")]
        public string TypeOfUnderlyingSecurityIssuersIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("underlyingSecurityIssuersIdentifier")]
        public string UnderlyingSecurityIssuersIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nameOfUnderlyingSecurityIssuer")]
        public string NameOfUnderlyingSecurityIssuer { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("homeCountryOfUnderlyingSecurityIssuer")]
        public string HomeCountryOfUnderlyingSecurityIssuer { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-9999999999999999.99", "9999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("totalNumberOfUnderlyingAssets")]
        public decimal TotalNumberOfUnderlyingAssetsValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalNumberOfUnderlyingAssets property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TotalNumberOfUnderlyingAssetsValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 18.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> TotalNumberOfUnderlyingAssets
        {
            get
            {
                if (this.TotalNumberOfUnderlyingAssetsValueSpecified)
                {
                    return this.TotalNumberOfUnderlyingAssetsValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalNumberOfUnderlyingAssetsValue = value.GetValueOrDefault();
                this.TotalNumberOfUnderlyingAssetsValueSpecified = value.HasValue;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("marketPriceOfUnderlyingAsset")]
        public decimal MarketPriceOfUnderlyingAssetValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MarketPriceOfUnderlyingAsset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MarketPriceOfUnderlyingAssetValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> MarketPriceOfUnderlyingAsset
        {
            get
            {
                if (this.MarketPriceOfUnderlyingAssetValueSpecified)
                {
                    return this.MarketPriceOfUnderlyingAssetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MarketPriceOfUnderlyingAssetValue = value.GetValueOrDefault();
                this.MarketPriceOfUnderlyingAssetValueSpecified = value.HasValue;
            }
        }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("marketPriceCurrencyOfUnderlyingAsset")]
        public string MarketPriceCurrencyOfUnderlyingAsset { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("derivativesRiskWeightedValue")]
        public decimal DerivativesRiskWeightedValueValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DerivativesRiskWeightedValue property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DerivativesRiskWeightedValueValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> DerivativesRiskWeightedValue
        {
            get
            {
                if (this.DerivativesRiskWeightedValueValueSpecified)
                {
                    return this.DerivativesRiskWeightedValueValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DerivativesRiskWeightedValueValue = value.GetValueOrDefault();
                this.DerivativesRiskWeightedValueValueSpecified = value.HasValue;
            }
        }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfDerivativesRiskWeightedValue")]
        public string CurrencyOfDerivativesRiskWeightedValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-9.99", "9.99")]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("derivativesDelta")]
        public decimal DerivativesDeltaValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DerivativesDelta property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool DerivativesDeltaValueSpecified { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -9.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 3.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> DerivativesDelta
        {
            get
            {
                if (this.DerivativesDeltaValueSpecified)
                {
                    return this.DerivativesDeltaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DerivativesDeltaValue = value.GetValueOrDefault();
                this.DerivativesDeltaValueSpecified = value.HasValue;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("itemType", Namespace = "http://bof.fi/SIRA")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ItemType
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("category")]
        public string Category { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("instrument")]
        public string Instrument { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("collateral")]
        public string Collateral { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("internalIdentificationCode")]
        public string InternalIdentificationCode { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("nominalValueCurrency")]
        public string NominalValueCurrency { get; set; }

        /// <summary>
        /// <para xml:lang="en">Minimum inclusive value: -999999999999999999.99.</para>
        /// <para xml:lang="en">Maximum inclusive value: 999999999999999999.99.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 2.</para>
        /// <para xml:lang="en">Total number of digits: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-999999999999999999.99", "999999999999999999.99")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("totalValue")]
        public decimal TotalValue { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("currencyOfValue")]
        public string CurrencyOfValue { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("typeOfCounterpartysIdentifier")]
        public string TypeOfCounterpartysIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 20.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(20)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysIdentifier")]
        public string CounterpartysIdentifier { get; set; }

        /// <summary>
        /// <para xml:lang="en">Maximum length: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.MaxLengthAttribute(100)]
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysName")]
        public string CounterpartysName { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysSector")]
        public string CounterpartysSector { get; set; }

        [System.Diagnostics.CodeAnalysis.AllowNullAttribute()]
        [System.Diagnostics.CodeAnalysis.MaybeNullAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("counterpartysHomeCountry")]
        public string CounterpartysHomeCountry { get; set; }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("issueDate", DataType = "date")]
        public System.DateTime IssueDateValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the IssueDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool IssueDateValueSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> IssueDate
        {
            get
            {
                if (this.IssueDateValueSpecified)
                {
                    return this.IssueDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.IssueDateValue = value.GetValueOrDefault();
                this.IssueDateValueSpecified = value.HasValue;
            }
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Xml.Serialization.XmlElementAttribute("maturityDate", DataType = "date")]
        public System.DateTime MaturityDateValue { get; set; }

        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaturityDate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MaturityDateValueSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> MaturityDate
        {
            get
            {
                if (this.MaturityDateValueSpecified)
                {
                    return this.MaturityDateValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaturityDateValue = value.GetValueOrDefault();
                this.MaturityDateValueSpecified = value.HasValue;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("siraReport", Namespace = "http://bof.fi/SIRA", AnonymousType = true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("siraReport", Namespace = "http://bof.fi/SIRA")]
    public partial class SiraReport
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("header")]
        public Bof.Stat.DCS.Converter.Model.XML.SIRA.HeaderType Header { get; set; }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("ifRecords")]
        public SiraReportIfRecords IfRecords { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType> _sbsRecords;

        [System.Xml.Serialization.XmlArrayAttribute("sbsRecords")]
        [System.Xml.Serialization.XmlArrayItemAttribute("sbs", Namespace = "http://bof.fi/SIRA")]
        public System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType> SbsRecords
        {
            get
            {
                return _sbsRecords;
            }
            set
            {
                _sbsRecords = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SbsRecords collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SbsRecordsSpecified
        {
            get
            {
                return ((this.SbsRecords != null)
                            && (this.SbsRecords.Count != 0));
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiraReport" /> class.</para>
        /// </summary>
        public SiraReport()
        {
            this._sbsRecords = new System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType>();
            this._itemRecords = new System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType> _itemRecords;

        [System.Xml.Serialization.XmlArrayAttribute("itemRecords")]
        [System.Xml.Serialization.XmlArrayItemAttribute("item", Namespace = "http://bof.fi/SIRA")]
        public System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType> ItemRecords
        {
            get
            {
                return _itemRecords;
            }
            set
            {
                _itemRecords = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the ItemRecords collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemRecordsSpecified
        {
            get
            {
                return ((this.ItemRecords != null)
                            && (this.ItemRecords.Count != 0));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("schemaVersion")]
        public string SchemaVersion { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiraReportIfRecords", Namespace = "http://bof.fi/SIRA", AnonymousType = true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiraReportIfRecords
    {

        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.Xml.Serialization.XmlElementAttribute("if")]
        public Bof.Stat.DCS.Converter.Model.XML.SIRA.IfType If { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiraReportSbsRecords", Namespace = "http://bof.fi/SIRA", AnonymousType = true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiraReportSbsRecords
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType> _sbs;

        [System.Xml.Serialization.XmlElementAttribute("sbs")]
        public System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType> Sbs
        {
            get
            {
                return _sbs;
            }
            set
            {
                _sbs = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Sbs collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SbsSpecified
        {
            get
            {
                return ((this.Sbs != null)
                            && (this.Sbs.Count != 0));
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiraReportSbsRecords" /> class.</para>
        /// </summary>
        public SiraReportSbsRecords()
        {
            this._sbs = new System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.SbsType>();
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("SiraReportItemRecords", Namespace = "http://bof.fi/SIRA", AnonymousType = true)]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SiraReportItemRecords
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType> _item;

        [System.Xml.Serialization.XmlElementAttribute("item")]
        public System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType> Item
        {
            get
            {
                return _item;
            }
            set
            {
                _item = value;
            }
        }

        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Item collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemSpecified
        {
            get
            {
                return ((this.Item != null)
                            && (this.Item.Count != 0));
            }
        }

        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="SiraReportItemRecords" /> class.</para>
        /// </summary>
        public SiraReportItemRecords()
        {
            this._item = new System.Collections.ObjectModel.Collection<Bof.Stat.DCS.Converter.Model.XML.SIRA.ItemType>();
        }
    }
}
